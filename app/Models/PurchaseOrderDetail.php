<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use App\Models\Category;
use App\Models\Brand;
use Carbon\Carbon;

class PurchaseOrderDetail extends Model
{

    protected $table = "purchase_order_detail";
    protected $primaryKey = 'id';
    public $incrementing = true;
    protected $keyType = 'integer';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'no_po',
        'no_po_jasmin',
        'purchase_order_id',
        'nama_barang',
        'link_barang',
        'estimasi_kg',
        'estimasi_harga',
        'status_follow_up',
        'nama_rek_transfer',
        'jumlah_transfer',
        'dp',
        'fullpayment',
        'foto_bukti_tf',
        'mutasi_check',
        'payment_method',
        'total_purchase',
        'foto_bukti_pembelian',
        'status_purchase',
        'notes',
        'hpp_mutasi_check',
        'wh_usa',
        'status_on_check',
        'wh_indo',
        'fix_weight',
        'fix_price',
        'status_barang_sampai',
        'qty',
        'estimasi_diskon',
        'total_estimasi',
        'asuransi',
        'jasa',
        'estimasi_notes',
        'kurang_bayar',
        'sku',
        'kurir_lokal',	
        'pelunasan',	
        'pajak',
        'diskon',	
        'pengiriman',
        'no_box',
        'harga_hpp',
        'tipe_order',
        'brand_id',
        'category_id',
    ];

   
    /**
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
 

    public function purchaseOrder()
    {
        return $this->belongsTo(PurchaseOrder::class);
    }

      protected static function boot()
    {
        parent::boot();

        // Auto generate invoice number sebelum create
        static::creating(function ($model) {
            if (empty($model->no_po) || $model->no_po === "Generated By System") {
                $model->no_po = $model->generatePurchaseOrderNumber($model->tipe_order);
            }else{
                $model->no_po_jasmin = $model->no_po;
                $model->no_po = $model->generatePurchaseOrderNumber($model->tipe_order);
            }
            if (empty($model->sku)) {
                $model->sku = self::generateSku($model->category_id, $model->brand_id);
            }
        });

        static::updating(function ($model) {
            unset($model->created_at); // buang kalau ada
        });
    }

    public function generatePurchaseOrderNumber(string $orderType): string
    {
        // Validasi tipe order
        $validOrderTypes = ['01', '02', '03', '04'];
        if (!in_array($orderType, $validOrderTypes)) {
            throw new \Exception("Tipe order tidak valid. Gunakan: 01, 02, 03, atau 04");
        }

        // Prefix tetap
        $prefix = "JUSA";
        
        // Tahun dan bulan sekarang
        $year = now()->format('Y');
        $month = now()->format('m');
        
        // Pattern untuk mencari invoice terakhir bulan ini
        $pattern = $prefix . $orderType . '%';
        
        // Cari invoice terakhir dengan pattern yang sama
        $lastInvoice = self::where('no_po', 'like', $pattern)
            ->orderBy('no_po', 'desc')
            ->first();
        
        // Tentukan increment number
        if ($lastInvoice && $lastInvoice->no_po) {
            $lastNumber = substr($lastInvoice->no_po, -5);
            $increment = intval($lastNumber) + 1;
        } else {
            $increment = 1;
        }
        
        // Format increment menjadi 4 digit
        $incrementFormatted = str_pad($increment, 5, '0', STR_PAD_LEFT);
        
        // Gabungkan semua bagian
        return $prefix . $orderType . $incrementFormatted;
    }

    public static function generateSku($categoryId, $brandId)
    {
        // Get category code
        $category = Category::find($categoryId);
        $categoryCode = $category ? $category->code : 'UNK';
        
        // Get brand code
        $brand = Brand::find($brandId);
        $brandCode = $brand ? $brand->code : 'UNK';
        
        // Get current year and month
        $currentYear = Carbon::now()->format('y'); // 2-digit year
        $currentMonth = Carbon::now()->format('m'); // 2-digit month
        
        // Get the last SKU for this category+brand+month+year combination
        $lastSku = self::where('category_id', $categoryId)
            ->where('brand_id', $brandId)
            ->whereYear('created_at', Carbon::now()->year)
            ->whereMonth('created_at', Carbon::now()->month)
            ->orderBy('id', 'desc')
            ->value('sku');
        
        // Extract the increment number from the last SKU
        $increment = 1;
        if ($lastSku) {
            // Pattern: CAT-BRAND-YYMM-NNNN
            $pattern = '/^' . preg_quote($categoryCode, '/') . '-' . 
                       preg_quote($brandCode, '/') . '-' . 
                       $currentYear . $currentMonth . '-(\d+)$/';
            
            if (preg_match($pattern, $lastSku, $matches)) {
                $increment = (int) $matches[1] + 1;
            }
        }
        
        // Format the increment with leading zeros (4 digits)
        $incrementFormatted = str_pad($increment, 4, '0', STR_PAD_LEFT);
        
        // Generate the final SKU
        return "{$categoryCode}-{$brandCode}-{$currentYear}{$currentMonth}{$incrementFormatted}";
    }
}